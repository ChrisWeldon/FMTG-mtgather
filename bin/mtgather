#!/usr/bin/env python

# SCRIPTS EMBEDDED INTO THE PACKAGE TO COLLECT THE DATA
import sys, os, json, time
from dotenv import load_dotenv
from mtgather import Card, CardPrice, Event, CardOccurance, Database, ServerError, ThrottleError
from mtgather import getEventsDay, getEventData, getOccDataByEvent, getCardsBySet
from datetime import date, timedelta, datetime

import nose
import requests


def throttleWait(wait=30):
    print("Throttle Wait")
    time.sleep(wait)

def daterange(first, last):
    dates = []
    for n in range(int ((last - first).days)+1):
        dates.append(first + timedelta(n))
    return dates

def concat(list1, list2):
    for e in list2:
        if e not in list1:
            list1.append(e)

def makeEmbed(data):
    embed = {}

    embed = {
        "title": data['format'],
        "fields":[
            {
                "name": "start",
                "value": data['start-collect'].strftime('%m/%d/%Y'),
                "inline":True
            },
            {
                "name": "end",
                "value": data['end-collect'].strftime('%m/%d/%Y'),
                "inline":True
            },
            {
                "name": "total events",
                "value": data['total-events'],
                "inline":True
            },
            {
                "name": "total decks",
                "value": data['total-decks'],
                "inline":True
            },
            {
                "name": "total occurances",
                "value": data['total-occurances'],
                "inline":True
            },
            {
                "name": "total duplicate occurances",
                "value": data['total-duplicate-occurances'],
                "inline":True
            },
            {
                "name": "Last event",
                "value": data['date-of-last-event'].strftime('%m/%d/%Y'),
                "inline": True

            }

        ]
    }


    return embed

def updateCardOccurances(format='standard', start_collect=None):
    # Oldest set release date 10/05/2018
    analytics = {
        "format" : format,
        "start-collect" : None,
        "end-collect" : None,
        "total-decks": 0,
        "total-occurances":0,
        "total-events": 0,
        "total-duplicate-occurances":0,
        "date-of-last-event":0
    }

    FORMAT = format
    START_DATE = start_collect
    print('RUNNING ON ', FORMAT)

    try:
        config_path = os.environ['GATHERCONFIG']
    except KeyError as e:
        #TODO throw error here
        print("ENV variable GATHERCONFIG not set")
        return
    print(config_path)
    db = Database(path=config_path)

    if(db.getLastEventDate(format=FORMAT) and start_collect == None):
        # if Db is empty
        START_DATE = db.getLastEventDate(format=FORMAT)

    dates_tocheck = daterange(START_DATE, date.today())
    analytics["start-collect"] = START_DATE

    analytics["end-collect"] = date.today()

    # Temporary overeride to grab missed on tournamnts.
    dates_tocheck = daterange(START_DATE, date.today())


    if(start_collect == None):
        del db
        events = []
        print("GETTING TOURNAMENTS")
        while len(dates_tocheck) > 0:
            print(dates_tocheck[0])
            try:
                concat(events, getEventsDay(date = dates_tocheck[0], format=FORMAT))
            except (ServerError, ThrottleError) as err:
                print(err)
                throttleWait()
            else:
                dates_tocheck.pop(0)
        db = Database(path=config_path)
    else:
        events = db.getEvents(start_collect)

    analytics['total-events'] = len(events)

    db = Database(path=config_path)
    # CACHED CARDS TO ELIMINATE REDUNDANT CALLS TO GOATBOTS AND ECHO
    CARDS = []
    print("GETTING EVENT DATA")
    while len(events)>0:
        occurances = []
        event = events[0]
        print(event)

        # if(db.eventCollected(event)):
        #     del events[0]
        #     print("(Collected)")
        #     continue

        if(event.decks==[]):
            try:
                decks = getEventData(event)
            except ThrottleError as err:
                print(err)
                throttleWait()
                continue
            except ServerError as err:
                print(err, " : ", events.pop(0))
                continue
            else:
                event.decks = decks

        analytics['total-decks'] += len(event.decks)

        try:
            occ = getOccDataByEvent(event)
        except(ThrottleError, ServerError) as err:
            print(err,   ": When Collecting Occ Data for ", event)
            throttleWait()
            continue

        for title in occ.keys():
            # This is where the rotation_date comes into play
            card = db.getCardByTitle(title, date=event.date)
            if card!=False:
                try:
                    occurances.append(CardOccurance(card, event, occ[title],date=event.date));
                except Exception as e:
                    print(card)
                    raise Exception(e)

        analytics['total-occurances'] += len(occurances)
        for c in occurances:
            added = db.addCardOccurance(c)
            if not added:
                analytics['total-duplicate-occurances'] +=1
        db.addEvent(events[0])
        del events[0]

    analytics['date-of-last-event'] = db.getLastEventDate(format=format)
    return analytics


if __name__ == "__main__":
    load_dotenv()

    if(len(sys.argv)>1 and sys.argv[1]=='test'):
        print("Running tests")

    elif(len(sys.argv)>1 and sys.argv[1]=='collect-series'):
        start_collect = None
        if(len(sys.argv)>2 and sys.argv[2]):
            try:
                start_collect = datetime.strptime(sys.argv[2], "%Y-%m-%d").date()
            except ValueError as e:
                print(e)
                print("\t Not a valid Date Argument in argv")

        standard_analytics = updateCardOccurances(format='standard', start_collect=start_collect)
        pioneer_analytics = updateCardOccurances(format='pioneer', start_collect=start_collect)

        webhook = os.getenv("WEBHOOK")
        if(webhook!=None):
            data = {
                "content" : "Scraping completed.",
                "embeds": []
            }

            data['embeds'].append(makeEmbed(standard_analytics))
            data['embeds'].append(makeEmbed(pioneer_analytics))

            res = requests.post(webhook, data=json.dumps(data), headers={"Content-Type": "application/json"})

            try:
                res.raise_for_status()
            except requests.exceptions.HTTPError as err:
                print(err)
            else:
                print("Payload delivered successfully, code {}.".format(res.status_code))

    elif(len(sys.argv)>1 and sys.argv[1]=='collect-cards'):
        try:
            config_path = os.environ['GATHERCONFIG']
        except KeyError as e:
            #TODO throw error here
            print("ENV variable GATHERCONFIG not set")

        print(config_path)
        db = Database(path=config_path)
        sets = db.getSets()
        for set in sets:
            print(set)
            cards = getCardsBySet(set_url=set.echo_url, rarities=['rare', 'mythic', 'mythic-rare'])
            db.addCards(cards)

    else:
        try:
            config_path = os.environ['GATHERCONFIG']
            print(config_path)
            db = Database(path=config_path)
        except KeyError as e:
            #TODO throw error here
            print("ENV variable GATHERCONFIG not set")
